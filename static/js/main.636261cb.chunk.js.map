{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Instructions/index.js","components/CurrentScore/index.js","components/TopScore/index.js","components/Message/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","onClick","removeFriend","id","guessed","Wrapper","children","Title","Instructions","CurrentScore","TopScore","Message","App","state","friends","cscore","tscore","initial","message","reorderFriends","random1","Math","floor","random","tempFriend1","splice","unshift","random2","tempFriend2","random3","tempFriend3","setState","setTimeout","this","bind","j","length","i","checkId","k","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.636261cb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  // console.log('props');\n  // console.log(props.id);\n  // console.log(props.guessed);\n\n  // console.log(props.indexOf(props.id));\n  return (\n    <div className=\"card\">\n      {/* <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      \n      <span onClick={() => props.removeFriend(props.id, props.guessed)} className=\"remove\">\n        x\n      </span> */}\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.removeFriend(props.id, props.guessed)} className=\"remove\"/>\n      </div>\n      \n      {/* <span onClick={() => props.removeFriend(props.id, props.guessed)} className=\"remove\">\n        x\n      </span> */}\n      {/* <span onClick={() => props.handleIncrement(props.id)} className=\"cscore\">\n        +\n      </span>\n      <span onClick={() => props.handleDecrement(props.id)} className=\"tscore\">\n        -\n      </span> */}\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h3 className=\"title\">{props.children}</h3>;\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Instructions(props) {\r\n//   return (<h3 className=\"instructions\">{props.children}</h3>)\r\n  return <h3 className=\"instructions\">Test your memory.<br></br>You win by clicking on\r\n   each of the images only once.<br></br>Your Current Score increases by one for each \r\n   click.<br></br> If you click on an image twice you lose.<br></br> You can start a \r\n   new game by clicking on an image.<br></br>Your Top Score is \r\n   displayed until the page is exited of refreshed.</h3>\r\n}\r\n\r\nexport default Instructions;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CurrentScore(props) {\n  return <h3 className=\"currentScore\">{props.children}</h3>;\n}\n\nexport default CurrentScore;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TopScore(props) {\n  return <h3 className=\"topScore\">{props.children}</h3>;\n}\n\nexport default TopScore;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Message(props) {\n  return <h3 className=\"message\">{props.children}</h3>;\n}\n\nexport default Message;\n","// import react\nimport React, { Component } from \"react\";\n// import components\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Instructions from \"./components/Instructions\";\nimport CurrentScore from \"./components/CurrentScore\";\nimport TopScore from \"./components/TopScore\";\nimport Message from \"./components/Message\";\n// import friends.json to populate cards\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // set initial states for scoring variables message and friends array\n  state = {\n    friends,\n    cscore: 0,\n    tscore: 0,\n    initial: true,\n    message: 'Let the game begin!'\n  };\n\n  // function reorderFriends moves three cards to random positions in array\n  reorderFriends = friends => {\n    // use Math.random to determine position of card to be removed\n    const random1 = Math.floor(Math.random()* 12);\n    // store friend object that will be removed\n    const tempFriend1 = friends[random1];\n    // remove friend object from array\n    friends.splice(random1, 1);\n    // put object in first position of array\n    friends.unshift(tempFriend1);\n    // perform similar operations for second and third friends objects\n    const random2 = Math.floor(Math.random()* 12);\n    const tempFriend2 = friends[random2];\n    friends.splice(random2, 1); \n    friends.unshift(tempFriend2);\n    const random3 = Math.floor(Math.random()* 12);\n    const tempFriend3 = friends[random3];\n    friends.splice(random3, 1); \n    friends.unshift(tempFriend3);\n    // set state for friends array;\n    this.setState(friends);\n  }\n\n  // function removeFriend changes state of friend object from false to true when 'x' is clicked,\n  // checks for game over conditions if image is clicked a second time, \n  // and increases cscore for current game and tscore for highest session score as needed\n  removeFriend = (id, guessed) => {\n    // create variable initial to track if first game being played\n    var initial = this.state.initial;\n    if (initial) {}\n    this.setState({message: 'Good Luck!'});\n    // create copies of states for use in function\n    var friends = this.state.friends;\n    // var cscore = this.state.score;\n    // check if object specified by id has already been guessed\n    if (guessed === 'true' && this.state.cscore < 11) {\n      this.setState({message: 'Game Over'});\n      // reser current score after 3\n      setTimeout(\n        function() {\n            this.setState({cscore: 0});\n        }\n        .bind(this),\n        3000\n    );\n      // set all friends object guessed value to false to restart game\n      for (var j = 0; j < friends.length; j++) {\n        friends[j].guessed = 'false';\n      }\n      // break out of function to restart game\n      return\n    }\n    // change state of friends object with specified id to true\n    function checkId(id, friends) {\n      for (var i = 0; i < friends.length; i++) {\n        if (friends[i].id === id) {\n          friends[i].guessed = 'true';\n        }\n      }\n    }\n    checkId(id, friends);\n    // set state of score variables\n    this.setState({ cscore: this.state.cscore + 1});\n    // set state of high session score if greater than current game score\n    if (this.state.cscore >= this.state.tscore) {\n      this.setState({tscore: this.state.cscore + 1});\n      this.setState({message: 'New High Score!'});\n    }\n    // check for game win\n    if (this.state.cscore === 11) {\n      this.setState({message: 'You Win!'});\n      // reset current score after three seconds\n      setTimeout(\n        function() {\n            this.setState({cscore: 0});\n        }\n        .bind(this),\n        3000\n      );\n      // set all friends object guessed value to false to restart game\n      for (var k = 0; k < friends.length; k++) {\n        friends[k].guessed = 'false';\n      }\n      // break out of function to restart game\n      return\n    }\n    // set state of friends arrays after correct guess\n    this.setState({friends});\n    // randomize order of images\n    this.reorderFriends(friends);\n  }\n  // create variable to hold instruction text\n  // set order of rendering for page\n  render() {\n    return (\n      <Wrapper>\n        <Title>Clicky Game</Title>\n        <Instructions>Instructions</Instructions>\n        <CurrentScore>Current Score: {this.state.cscore}</CurrentScore>\n        <TopScore>Top Score: {this.state.tscore}</TopScore>\n        <Message>{this.state.message}</Message>\n        {this.state.friends.map(friend => (\n          <FriendCard\n          removeFriend={this.removeFriend}\n          image={friend.image}\n          key={friend.id}\n          id={friend.id}\n          guessed = {friend.guessed}\n          />\n          ))}\n      </Wrapper>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}